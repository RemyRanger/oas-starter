openapi: 3.0.3
info:
  title: Example - Control API
  version: '1.0'
  description: |-
    Example - Control API

    We use the API Specification to describe each endpoint. The API self-description also contains type information to help you error-check your requests.

    # Authentication

    Bearer token - Auth is provided by bearer token. Tokens are managed on platform interface. 

    <!-- ReDoc-Inject: <security-definitions> -->
  contact:
    name: Developers Contact
    email: developers@example.com
  license:
    name: private-license
    url: https://example.com/cgu
servers:
  - url: https://example-test.com/v1/control
    description: API base url.
security:
  - bearerAuth: []
paths:
  /healthcheck:
    get:
      tags:
        - Healthcheck
      summary: Health Check
      description: The healthcheck endpoint retrieve 200 code if service is up.
      operationId: getHealth
      responses:
        '200':
          description: Successful operation.
        '400':
          $ref: '#/components/responses/400_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/control/healthcheck \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/healthcheck")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/healthcheck\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/healthcheck');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/healthcheck", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/healthcheck",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /apis:
    get:
      tags:
        - Api
      summary: Find APIs
      description: Find all APIs by criteria with pagination.
      operationId: findApis
      parameters:
        - $ref: '#/components/parameters/query_page'
        - $ref: '#/components/parameters/query_page_size'
        - $ref: '#/components/parameters/query_sort_desc'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api-list'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://example-test.com/v1/control/apis?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/apis?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_INTEGER_VALUE',
              'page_size' => 'SOME_INTEGER_VALUE',
              'sort_desc' => 'SOME_BOOLEAN_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/apis?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    post:
      tags:
        - Api
      summary: Create API
      description: Create one API.
      operationId: createApi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api-in'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://example-test.com/v1/control/apis \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"title":"Hello world API","description":"The purpose of this API is jsut to say '\''Hello World'\''.","version":"v1.0.0","base_url":"https://base-url.com/api/","gateway_mode":"DOMAIN","status":"ENABLE"}'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://example-test.com/v1/control/apis")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"title\":\"Hello world API\",\"description\":\"The purpose of this API is jsut to say 'Hello World'.\",\"version\":\"v1.0.0\",\"base_url\":\"https://base-url.com/api/\",\"gateway_mode\":\"DOMAIN\",\"status\":\"ENABLE\"}")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis\"\n\n\tpayload := strings.NewReader(\"{\\\"title\\\":\\\"Hello world API\\\",\\\"description\\\":\\\"The purpose of this API is jsut to say 'Hello World'.\\\",\\\"version\\\":\\\"v1.0.0\\\",\\\"base_url\\\":\\\"https://base-url.com/api/\\\",\\\"gateway_mode\\\":\\\"DOMAIN\\\",\\\"status\\\":\\\"ENABLE\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"title":"Hello world API","description":"The purpose of this API is jsut to say 'Hello World'.","version":"v1.0.0","base_url":"https://base-url.com/api/","gateway_mode":"DOMAIN","status":"ENABLE"}');

            $request->setRequestUrl('https://example-test.com/v1/control/apis');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN',
              'content-type' => 'application/json'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            payload = "{\"title\":\"Hello world API\",\"description\":\"The purpose of this API is jsut to say 'Hello World'.\",\"version\":\"v1.0.0\",\"base_url\":\"https://base-url.com/api/\",\"gateway_mode\":\"DOMAIN\",\"status\":\"ENABLE\"}"

            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/v1/control/apis", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              title: 'Hello world API',
              description: 'The purpose of this API is jsut to say \'Hello World\'.',
              version: 'v1.0.0',
              base_url: 'https://base-url.com/api/',
              gateway_mode: 'DOMAIN',
              status: 'ENABLE'
            }));
            req.end();
  /apis/{api_id}:
    parameters:
      - name: api_id
        in: path
        description: API unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
    get:
      tags:
        - Api
      summary: Get API.
      description: Get API by unique ID.
      operationId: getApi
      responses:
        '200':
          description: Operation Successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75 \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    put:
      tags:
        - Api
      summary: Update API.
      description: Update API fields.
      operationId: updateApi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api-in'
      responses:
        '200':
          description: Resource updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request PUT \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75 \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: application/json' \
              --data '{"title":"Hello world API","description":"The purpose of this API is jsut to say '\''Hello World'\''.","version":"v1.0.0","base_url":"https://base-url.com/api/","gateway_mode":"DOMAIN","status":"ENABLE"}'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.put("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"title\":\"Hello world API\",\"description\":\"The purpose of this API is jsut to say 'Hello World'.\",\"version\":\"v1.0.0\",\"base_url\":\"https://base-url.com/api/\",\"gateway_mode\":\"DOMAIN\",\"status\":\"ENABLE\"}")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75\"\n\n\tpayload := strings.NewReader(\"{\\\"title\\\":\\\"Hello world API\\\",\\\"description\\\":\\\"The purpose of this API is jsut to say 'Hello World'.\\\",\\\"version\\\":\\\"v1.0.0\\\",\\\"base_url\\\":\\\"https://base-url.com/api/\\\",\\\"gateway_mode\\\":\\\"DOMAIN\\\",\\\"status\\\":\\\"ENABLE\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"title":"Hello world API","description":"The purpose of this API is jsut to say 'Hello World'.","version":"v1.0.0","base_url":"https://base-url.com/api/","gateway_mode":"DOMAIN","status":"ENABLE"}');

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75');
            $request->setRequestMethod('PUT');
            $request->setBody($body);

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN',
              'content-type' => 'application/json'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            payload = "{\"title\":\"Hello world API\",\"description\":\"The purpose of this API is jsut to say 'Hello World'.\",\"version\":\"v1.0.0\",\"base_url\":\"https://base-url.com/api/\",\"gateway_mode\":\"DOMAIN\",\"status\":\"ENABLE\"}"

            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("PUT", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              title: 'Hello world API',
              description: 'The purpose of this API is jsut to say \'Hello World\'.',
              version: 'v1.0.0',
              base_url: 'https://base-url.com/api/',
              gateway_mode: 'DOMAIN',
              status: 'ENABLE'
            }));
            req.end();
    delete:
      tags:
        - Api
      summary: Delete API.
      description: Soft delete API.
      operationId: deleteApi
      responses:
        '204':
          description: Resource deleted.
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75 \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75');
            $request->setRequestMethod('DELETE');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("DELETE", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /apis/{api_id}/oas:
    parameters:
      - name: api_id
        in: path
        description: API unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
    get:
      tags:
        - Oas
      summary: Find Oas
      description: Find all Oas by criteria with pagination.
      operationId: findOas
      parameters:
        - $ref: '#/components/parameters/query_page'
        - $ref: '#/components/parameters/query_page_size'
        - $ref: '#/components/parameters/query_sort_desc'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oas-list'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url 'https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE' \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString([
              'page' => 'SOME_INTEGER_VALUE',
              'page_size' => 'SOME_INTEGER_VALUE',
              'sort_desc' => 'SOME_BOOLEAN_VALUE'
            ]));

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas?page=SOME_INTEGER_VALUE&page_size=SOME_INTEGER_VALUE&sort_desc=SOME_BOOLEAN_VALUE",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /apis/{api_id}/oas/_upload:
    parameters:
      - name: api_id
        in: path
        description: API unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
    post:
      tags:
        - Oas
      summary: Upload Oas file.
      description: Upload Oas file and create oas object linked with API Id.
      operationId: uploadOas
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - oas
              properties:
                oas:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oas'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \
              --header 'content-type: multipart/form-data' \
              --form oas=string
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "multipart/form-data")
              .body("-----011000010111000001101001\r\nContent-Disposition: form-data; name=\"oas\"\r\n\r\nstring\r\n-----011000010111000001101001--\r\n")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload\"\n\n\tpayload := strings.NewReader(\"-----011000010111000001101001\\r\\nContent-Disposition: form-data; name=\\\"oas\\\"\\r\\n\\r\\nstring\\r\\n-----011000010111000001101001--\\r\\n\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->addForm([
              'oas' => 'string'
            ], null);

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            payload = "-----011000010111000001101001\r\nContent-Disposition: form-data; name=\"oas\"\r\n\r\nstring\r\n-----011000010111000001101001--\r\n"

            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "multipart/form-data"
                }

            conn.request("POST", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/_upload",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "multipart/form-data"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write("-----011000010111000001101001\r\nContent-Disposition: form-data; name=\"oas\"\r\n\r\nstring\r\n-----011000010111000001101001--\r\n");
            req.end();
  /apis/{api_id}/oas/{oas_id}/_download:
    parameters:
      - name: api_id
        in: path
        description: API unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
      - name: oas_id
        in: path
        description: Oas unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
    get:
      tags:
        - Oas
      summary: Download Oas file.
      description: Download Oas file linked with API Id.
      operationId: downloadOas
      responses:
        '200':
          description: Successful operation
          content:
            multipart/form-data:
              schema:
                type: object
                required:
                  - oas
                properties:
                  oas:
                    type: string
                    format: binary
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/_download",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
  /apis/{api_id}/oas/{oas_id}:
    parameters:
      - name: api_id
        in: path
        description: API unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
      - name: oas_id
        in: path
        description: Oas unique ID
        required: true
        schema:
          type: string
          description: |
            The unique ID of an object.
          pattern: ^[-_0-9a-zA-Z]+$
          minLength: 36
          maxLength: 36
          example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
          x-oapi-codegen-extra-tags:
            validate: required,uuid4
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
    get:
      tags:
        - Oas
      summary: Get Oas.
      description: Get Oas by unique ID.
      operationId: getOas
      responses:
        '200':
          description: Operation Successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oas'
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request GET \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75 \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75');
            $request->setRequestMethod('GET');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
    delete:
      tags:
        - Oas
      summary: Delete Oas.
      description: Soft delete Oas.
      operationId: deleteOas
      responses:
        '204':
          description: Resource deleted.
        '400':
          $ref: '#/components/responses/400_Error'
        '401':
          $ref: '#/components/responses/401_Error'
        '403':
          $ref: '#/components/responses/403_Error'
        '404':
          $ref: '#/components/responses/404_Error'
        '500':
          $ref: '#/components/responses/500_Error'
        '503':
          $ref: '#/components/responses/503_Error'
      x-codeSamples:
        - lang: Shell + Curl
          source: |-
            curl --request DELETE \
              --url https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75 \
              --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'
        - lang: Java + Unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Go + Native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Php + Http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://example-test.com/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75');
            $request->setRequestMethod('DELETE');
            $request->setHeaders([
              'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'
            ]);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("example-test.com")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("DELETE", "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node + Native
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "example-test.com",
              "port": null,
              "path": "/v1/control/apis/b76c02d2-f68f-4ab1-bb97-c75f357c2a75/oas/b76c02d2-f68f-4ab1-bb97-c75f357c2a75",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ModelError:
      description: A representation of an errorMessage
      type: object
      properties:
        errorMessage:
          type: string
          description: error Message
    page:
      type: object
      required:
        - total
        - page
        - page_size
      properties:
        total:
          type: integer
          format: int64
          description: Total elements found.
          example: 68
        page:
          type: integer
          format: int64
          description: Page position.
          example: 1
        page_size:
          type: integer
          format: int64
          description: Page size.
          example: 10
    id:
      type: string
      description: |
        The unique ID of an object.
      pattern: ^[-_0-9a-zA-Z]+$
      minLength: 36
      maxLength: 36
      example: b76c02d2-f68f-4ab1-bb97-c75f357c2a75
      x-oapi-codegen-extra-tags:
        validate: required,uuid4
      x-go-type: googleuuid.UUID
      x-go-type-import:
        path: github.com/google/uuid
        name: googleuuid
    audit:
      type: object
      required:
        - created_at
        - updated_at
      properties:
        created_at:
          type: string
          format: date-time
          description: Created date.
          example: '2024-08-30T14:48:15.062268031+02:00'
        updated_at:
          type: string
          format: date-time
          description: Updated date.
          example: '2024-08-30T14:48:15.062268031+02:00'
    api-in:
      type: object
      description: API request model.
      required:
        - title
        - version
        - base_url
        - gateway_mode
        - status
      properties:
        title:
          type: string
          maxLength: 256
          description: API title.
          example: Hello world API
          x-oapi-codegen-extra-tags:
            validate: required,lte=256
        description:
          type: string
          maxLength: 1024
          description: API description.
          example: The purpose of this API is jsut to say 'Hello World'.
          x-oapi-codegen-extra-tags:
            validate: omitempty,lte=1024
        version:
          type: string
          maxLength: 32
          description: API version.
          example: v1.0.0
          x-oapi-codegen-extra-tags:
            validate: required,lte=32
        base_url:
          type: string
          maxLength: 1024
          description: API base url.
          example: https://base-url.com/api/
          x-oapi-codegen-extra-tags:
            validate: required,lte=1024,url
        gateway_mode:
          type: string
          description: |-
            Gateway transfer mode :
              - DOMAIN : redirect all incoming requests,
              - URL : redirect incoming requests according to paths in linked OAS document,
              - STRICT : redirect only requests validated with linked OAS document (valdiate all informations such as parameters, paths, headers, ..). Most secured.
          enum:
            - DOMAIN
            - URL
            - STRICT
          x-oapi-codegen-extra-tags:
            validate: required,oneof=DOMAIN URL STRICT
        status:
          type: string
          description: Status of the API.
          enum:
            - ENABLE
            - DISABLE
            - DELETED
          x-oapi-codegen-extra-tags:
            validate: required,oneof=ENABLE DISABLE DELETED
    api:
      type: object
      description: API model.
      required:
        - ID
      allOf:
        - properties:
            ID:
              $ref: '#/components/schemas/id'
            active_oas_id:
              $ref: '#/components/schemas/id'
        - $ref: '#/components/schemas/audit'
        - $ref: '#/components/schemas/api-in'
    api-list:
      type: object
      required:
        - page
        - elems
      properties:
        page:
          $ref: '#/components/schemas/page'
        elems:
          type: array
          items:
            $ref: '#/components/schemas/api'
          maxItems: 100
    oas-in:
      type: object
      description: OAS request model.
      required:
        - api_version
        - openapi_version
      properties:
        api_version:
          description: API version wich is described in Oas.
          type: string
          example: 1.3.1
          x-oapi-codegen-extra-tags:
            validate: required,lte=32
        openapi_version:
          description: Openapi format version.
          type: string
          example: 3.0.3
          x-oapi-codegen-extra-tags:
            validate: required,lte=32
    oas:
      type: object
      description: OAS model.
      required:
        - ID
        - status
      allOf:
        - properties:
            ID:
              $ref: '#/components/schemas/id'
        - $ref: '#/components/schemas/audit'
        - $ref: '#/components/schemas/oas-in'
    oas-list:
      type: object
      required:
        - page
        - elems
      properties:
        page:
          $ref: '#/components/schemas/page'
        elems:
          type: array
          items:
            $ref: '#/components/schemas/oas'
          maxItems: 100
  responses:
    400_Error:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Bad Request
    503_Error:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Service Unavailable
    401_Error:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Unauthorized
    403_Error:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Forbidden
    404_Error:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Not Found
    500_Error:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
          example:
            errorMessage: Internal Server Error
  parameters:
    query_page:
      name: page
      in: query
      required: false
      description: Page position.
      schema:
        type: integer
        format: int64
        default: 1
        minimum: 1
      x-oapi-codegen-extra-tags:
        validate: omitempty,gte=1
    query_page_size:
      name: page_size
      in: query
      required: false
      description: Page size.
      schema:
        type: integer
        format: int64
        default: 10
        minimum: 1
        maximum: 100
      x-oapi-codegen-extra-tags:
        validate: omitempty,gte=1,lte=100
    query_sort_desc:
      name: sort_desc
      in: query
      required: false
      description: Is sorting desc (sorted on created date by default).
      schema:
        type: boolean
        default: false
